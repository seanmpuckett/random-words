#!/usr/bin/env sai-run

//////////////////
//
//  Markov chain random word generator

reference:
  FS from require 'fs'
  ReadFile FS's readFileSync
  ARGV ~process's argv
  Exit ~process's exit
  WATCHDOG 100


object RW main

instance:
  wordcount 100
  truncate undefined
  window 3
  frequency false
  weighted 'AnalyzeUnweighted'
  minimum undefined

  markovWord undefined
  

Instantiate task

  set markovWord create 'MarkovWord'

  set argv to copy ARGV 
  if 'node' is (argv.0 | limit -4) .. shift'd argv
  if 'sai-run' is (argv.0 | limit -7) .. shift'd argv
  shift'd argv
  
  if argv's length < 1
    debug '''
      random-words -- Generate new, unique words from a seed set of words
      
      USAGE
        random-words [seed.txt]   - print a markov chain generated list of random words
      
      OPTIONS
        -c, --count [number]      - maximum number of unique words to generate (default ${wordcount})
        -f, --frequency           - show frequency counts for each unique word
        -i, --influence           - each input line may have a number, the influence of words on that line
        -l, --limit [number]      - limit output to how many most frequent words (default all)
        -m, --minimum [number]    - minimum length of word to generate (default, and lowest, is window size)
        -w, --window [number]     - size of the markov analysis window in characters, (2+, default ${ window})
        
      EXAMPLE
        random-words -c 50 countries.txt
        
      NOTE
        Results are printed to STDOUT, separated by spaces. STDIN is not accepted, you must
        supply a file. Duplicates, and words that appear in the orginal text are not included
        in the output. If the probability of generating unique words is low, it may take a while
        to generate a large set of unique words. 
        
    Exit

  while shift'd argv
    switch it
    
    case '-c', '--count'
      set wordcount to number shift'd argv
      
    case '-w', '--window'
      with number shift'd argv
        unless it < 2
          set window to it
        else
          debug 'Error: --window cannot be less than 2.'
          Exit
  
    case '-i', '--influence'
      set weighted 'AnalyzeWeighted'
      
    case '-f', '--frequency'
      set frequency true
      
    case '-l', '--limit'
      set truncate to number shift'd argv
      
    case '-m', '--minimum'
      set minimum to number shift'd argv
      
    else 
      try
        set source from ReadFile it, 'utf8'
      catch
        debug 'Error ${error's message} reading file.'
        Exit
        
      markovWord.Configure @ 
      markovWord\weighted source

      unless markovWord's success
        debug 'No input words longer than ${window} letters, cannot produce a markov chain. '
      else
        set results Generate'd markovWord wordcount; | limit 0, truncate
        unless results's length
          debug 'No unique words generated. Try increasing count or decreasing window size.'
        else
          if results's length < (truncate ? wordcount)/2
            debug 'Few unique words generated due to high window size or low input variety.'
            
          set results | thru toUpperCase'd (it | limit 1); + (it | limit 1, undefined)
          debug join'd results ' '


